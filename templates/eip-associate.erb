#!/bin/bash
# This script runs on every bootup, and does the following:
#
# - Waits for consul to be up and running
# - Checks to see if there is a allocation ID in consul
# - If there is associate it using awscli
#
#set -x

LOGGER_BIN='/usr/bin/logger'

# Set up the logger command if the binary is installed
if [ ! -x $LOGGER_BIN ]; then
    echo "ERROR: 'logger' binary not found - Aborting"
    exit 2
else
    LOGGER="$LOGGER_BIN --stderr --priority local7.info --tag ${BASH_SOURCE}"
fi

# Source the consul connection details from the metadata api
eval `curl -s -fq http://169.254.169.254/latest/user-data`

# Setup variables
INSTANCE_ID=$(curl -s -fq http://169.254.169.254/latest/meta-data/instance-id)
LOCAL_IP=$(curl -s -fq http://169.254.169.254/latest/meta-data/local-ipv4)
EC2_REGION=$(curl -s -fq http://169.254.169.254/latest/dynamic/instance-identity/document | jq '.region' -r)

# First, check with CloudFormation to see if we can find our IP
if [[ -z "${ELASTICIP_ID}" ]]; then

    # Is it up yet? Otherwise wait until the stack is done
    until [ ! -z "${ELASTICIP_ID}" ]; do
        $LOGGER "Waiting on Elastic IP to be ready"
        ELASTICIP_ID=$(aws --region $EC2_REGION cloudformation describe-stacks --stack-name $NUBIS_STACK --query "Stacks[].Outputs[?OutputKey=='<%= @cfn_eip_output_key %>'].OutputValue" --output text)
        sleep 10
    done
fi

if [[ -z "${INSTANCE_ID}" ]]; then
    $LOGGER "ERROR: Instance ID not found"
    exit 1
fi

aws ec2 associate-address --instance-id ${INSTANCE_ID} --allocation-id ${ELASTICIP_ID} --private-ip-address ${LOCAL_IP} --region ${EC2_REGION}
RV=$?

if [[ ${RV} != 0 ]]; then
    $LOGGER "ERROR: Unable to associate elastic IP ${ELASTICIP_ID} to instance ${INSTANCE_ID}"
    exit ${RV}
else
    # We assume that if return value is not 0 then we have successfully associated an EIP
    $LOGGER "SUCCESS: Associated ${ELASTICIP_ID} to instance ${INSTANCE_ID}"
fi
