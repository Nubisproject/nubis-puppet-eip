#!/bin/bash
# This script runs on every bootup, and does the following:
#
# - Waits for consul to be up and running
# - Checks to see if there is a allocation ID in consul
# - If there is associate it using awscli
#
#set -x

LOGGER_BIN='/usr/bin/logger'

# Set up the logger command if the binary is installed
if [ ! -x $LOGGER_BIN ]; then
    echo "ERROR: 'logger' binary not found - Aborting"
    exit 2
else
    LOGGER="$LOGGER_BIN --stderr --priority local7.info --tag eip-associate"
fi

# Source the consul connection details from the metadata api
eval `curl -s -fq http://169.254.169.254/latest/user-data`

# Set up the consul url
CONSUL="http://localhost:8500/v1/kv/${NUBIS_STACK}/${NUBIS_ENVIRONMENT}/config"

# We run early, so we need to account for Consul's startup time, unfortunately, magic isn't
# always free
CONSUL_UP=-1
COUNT=0
while [ "$CONSUL_UP" != "0" ]; do
    if [ ${COUNT} == "6" ]; then
        $LOGGER "ERROR: Timeout while attempting to connect to consul."
        exit 1
    fi
    QUERY=`curl -s ${CONSUL}?raw=1`
    CONSUL_UP=$?

    if [ "$QUERY" != "" ]; then
        CONSUL_UP=-2
    fi

    if [ "$CONSUL_UP" != "0" ]; then
        $LOGGER "Consul not ready yet ($CONSUL_UP). Sleeping 10 seconds before retrying..."
        sleep 10
        COUNT=${COUNT}+1
    fi
done

# Grab the variables from consul
#+ If this is a new stack we need to wait for the values to be placed in consul
#+ We will test the first and sleep with a timeout
KEYS_UP=-1
COUNT=0
while [ "$KEYS_UP" != "0" ]; do
    # Try for 20 minutes (30 seconds * 20160 attempts = 604800 seconds / 60 seconds / 60 minutes / 12 hours = 7 days)
    if [ ${COUNT} == "20160" ]; then
        $LOGGER "ERROR: Timeout while waiting for keys to be populated in consul."
        exit 1
    fi
    QUERY=$(curl -s $CONSUL/ElasticIP?raw=1)

    if [ "$QUERY" == "" ]; then
        $LOGGER "Keys not ready yet. Sleeping 30 seconds before retrying..."
        sleep 30
        COUNT=${COUNT}+1
    else
        KEYS_UP=0
    fi
done

ALLOCATION_ID=$(curl -s $CONSUL/ElasticIP?raw=1)
INSTANCE_ID=$(curl -s -fq http://169.254.169.254/latest/meta-data/instance-id)
LOCAL_IP=$(curl -s -fq http://169.254.169.254/latest/meta-data/local-ipv4)
EC2_REGION=$(curl -s -fq http://169.254.169.254/latest/dynamic/instance-identity/document | jq '.region' -r)

# If we didn't find our elasticip in Consul, look for it in our CloudFormation stack outputs
if [ -z "${ALLOCATION_ID}" ]; then
  ALLOCATION_ID = $(aws --region $EC2_REGION cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[].Outputs[?OutputKey == ElasticIP].OutputValue' --output text)
fi

if [[ -z "${ALLOCATION_ID}" ]]; then
    $LOGGER "ERROR: Instance ID not found"
    exit 1
fi

aws ec2 associate-address --instance-id ${INSTANCE_ID} --allocation-id ${ALLOCATION_ID} --private-ip-address ${LOCAL_IP} --region ${EC2_REGION}
RV=$?

if [[ ${RV} != 0 ]]; then
    $LOGGER "ERROR: Unable to associate elastic IP ${ALLOCATION_ID} to instance ${INSTANCE_ID}"
    exit ${RV}
else
    # We assume that if return value is not 0 then we have successfully associated an EIP
    $LOGGER "SUCCESS: Associated ${ALLOCATION_IP} to instance ${INSTANCE_ID}"
fi
